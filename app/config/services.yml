services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    ## makes classes in src/AppBundle available to be used as services
    ## this creates a service per class whose id is the fully-qualified class name
    # AppBundle\:
    #     resource: '../../src/AppBundle/*'
    #     # you can exclude directories or files
    #     # but if a service is unused, it's removed anyway
    #     exclude: '../../src/AppBundle/{Entity,Repository}'
        
    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services

    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        tags: ['controller.service_arguments']
        
    AppBundle\Form\RegistrationFormType:
        tags:
            - { name: form.type, alias: app_user_registration }

    AppBundle\Form\ProfileFormType:
        tags:
            - { name: form.type, alias: appbundle_profile }

    AppBundle\EventListener\ActivityListener:
        arguments:
            - '@security.token_storage'
            - '@doctrine'
        tags:
            - { name: kernel.event_listener, 
                event: kernel.controller,
                method: onCoreController }

    app.add_example_data:
        class: AppBundle\EventListener\AddExampleDataAfterRegistration
        autowire: true
        tags:
            - { name: kernel.event_subscriber }

    app.menu_builder:
        class: AppBundle\Menu\MenuBuilder
        arguments: ["@knp_menu.factory"]
        tags:
            - { name: knp_menu.menu_builder, method: createMainMenu, alias: main } # The alias is what is used to retrieve the menu

    Monolog\Processor\PsrLogMessageProcessor:
        tags: { name: monolog.processor, handler: sentry }